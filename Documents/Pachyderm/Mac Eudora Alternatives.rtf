{\rtf0\mac\deff21{\fonttbl{\f3026 \fnil Abadi MT Condensed Extra Bold;}{\f3027 \fnil Abadi MT Condensed Light;}{\f3044 \fnil American Typewriter;}{\f3045 \fnil American Typewriter Condensed;}{\f3047 \fnil American Typewriter Condensed Light;}{\f3046 \fnil American Typewriter Light;}{\f7102 \fnil Andale Mono;}{\f2311 \fnil Apple Chancery;}{\f2001 \fnil Arial;}{\f12077 \fnil Arial Black;}{\f2000 \fnil Arial Narrow;}{\f3007 \fnil Arial Rounded MT Bold;}{\f2424 \fnil Baskerville;}{\f2022 \fnil Baskerville Old Face;}{\f2425 \fnil Baskerville Semibold;}{\f3008 \fnil Bauhaus 93;}{\f2035 \fnil Bell MT;}{\f2067 \fnil Bernard MT Condensed;}{\f2474 \fnil Big Caslon;}{\f-28512 \fnil Book Antiqua;}{\f5022 \fnil Bookman Old Style;}{\f2023 \fnil Braggadocio;}{\f2025 \fnil Britannic Bold;}{\f3017 \fnil Brush Script MT;}{\f2068 \fnil Calisto MT;}{\f2003 \fnil Capitals;}{\f12888 \fnil Century;}{\f-27456 \fnil Century Gothic;}{\f2008 \fnil Century Schoolbook;}{\f-28928 \fnil Chalkboard;}{\f-9152 \fnil Chalkboard Bold;}{\f2002 \fnil Charcoal;}{\f16383 \fnil Chicago;}{\f14651 \fnil Cochin;}{\f3012 \fnil Colonna MT;}{\f4513 \fnil Comic Sans MS;}{\f1797 \fnil Cooper Black;}{\f2224 \fnil Copperplate;}{\f4663 \fnil Copperplate Gothic Bold;}{\f3022 \fnil Copperplate Gothic Light;}{\f2422 \fnil Copperplate Light;}{\f22 \fmodern Courier;}{\f2005 \fnil Courier New;}{\f-2400 \fnil Curlz MT;}{\f6072 \fnil Desdemona;}{\f8916 \fnil Didot;}{\f1359 \fnil Edwardian Script ITC;}{\f2069 \fnil Engravers MT;}{\f1219 \fnil Eurostile;}{\f3013 \fnil Footlight MT Light;}{\f4060 \fnil Futura;}{\f4061 \fnil Futura Condensed;}{\f2307 \fnil Gadget;}{\f1432 \fnil Garamond;}{\f-8096 \fnil Geeza Pro;}{\f-22592 \fnil Geeza Pro Bold;}{\f3 \fswiss Geneva;}{\f12171 \fnil Georgia;}{\f4242 \fnil Gill Sans;}{\f4243 \fnil Gill Sans Light;}{\f2036 \fnil Gill Sans Ultra Bold;}{\f3028 \fnil Gloucester MT Extra Condensed;}{\f2070 \fnil Goudy Old Style;}{\f2071 \fnil Haettenschweiler;}{\f2038 \fnil Harrington;}{\f21 \fswiss Helvetica;}{\f4684 \fnil Helvetica Neue;}{\f4889 \fnil Helvetica Neue Black Condensed;}{\f4685 \fnil Helvetica Neue Bold Condensed;}{\f4846 \fnil Helvetica Neue Light;}{\f4688 \fnil Helvetica Neue UltraLight;}{\f4224 \fnil Herculanum;}{\f2013 \fnil Hoefler Text;}{\f2018 \fnil Hoefler Text Ornaments;}{\f2039 \fnil Impact;}{\f2072 \fnil Imprint MT Shadow;}{\f3014 \fnil Kino MT;}{\f6073 \fnil Lucida Blackletter;}{\f6069 \fnil Lucida Bright;}{\f6074 \fnil Lucida Calligraphy;}{\f6561 \fnil Lucida Fax;}{\f1024 \fnil Lucida Grande;}{\f6071 \fnil Lucida Handwriting;}{\f6070 \fnil Lucida Sans;}{\f3082 \fnil Lucida Sans Typewriter;}{\f2020 \fnil Marker Felt;}{\f3015 \fnil Matura MT Script Capitals;}{\f2041 \fnil Mistral;}{\f2073 \fnil Modern No. 20;}{\f4 \fmodern Monaco;}{\f-28544 \fnil Monotype Corsiva;}{\f2007 \fnil Monotype Sorts;}{\f2515 \fnil MT Extra;}{\f2 \froman New York;}{\f2074 \fnil News Gothic MT;}{\f2044 \fnil Onyx;}{\f6376 \fnil Optima;}{\f4154 \fnil Optima ExtraBlack;}{\f16 \froman Palatino;}{\f5136 \fnil Papyrus;}{\f2077 \fnil Perpetua Titling MT;}{\f2047 \fnil Playbill;}{\f7861 \fnil Rockwell;}{\f2079 \fnil Rockwell Extra Bold;}{\f2004 \fnil Sand;}{\f2040 \fnil Skia;}{\f2049 \fnil Stencil;}{\f23 \ftech Symbol;}{\f6583 \fnil Tahoma;}{\f2006 \fnil Techno;}{\f2305 \fnil Textile;}{\f20 \froman Times;}{\f2010 \fnil Times New Roman;}{\f1109 \fnil Trebuchet MS;}{\f7203 \fnil Verdana;}{\f14213 \fnil Webdings;}{\f-29248 \fnil Wide Latin;}{\f2011 \fnil Wingdings;}{\f2051 \fnil Wingdings 2;}{\f2052 \fnil Wingdings 3;}{\f1236 \fnil Zapf Dingbats;}{\f642 \fnil Zapfino;}{\f30745 \fnil Courier CE;}{\f30723 \fnil Geneva CE;}{\f30741 \fnil Helvetica CE;}{\f-21059 \fnil Lucida Grande CE;}{\f30724 \fnil Monaco CE;}{\f30740 \fnil Times CE;}{\f19464 \fnil Lucida Grande CY;}{\f19460 \fnil Monaco CY;}{\f19540 \fnil Times CY;}{\f17168 \fnil Apple LiGothic Medium;}{\f17170 \fnil Apple LiSung Light;}{\f17082 \fnil BiauKai;}{\f-7550 \fnil ∑s≤”©˙≈È;}{\f-22206 \fnil ƒ◊ß∫ Pro;}{\f-17214 \fnil ƒ◊∂¬ Pro;}{\f28932 \fnil Fang Song;}{\f-2887 \fnil GB18030 Bitmap;}{\f28930 \fnil Hei;}{\f28931 \fnil Kai;}{\f28929 \fnil Song;}{\f-4967 \fnil ª™Œƒ∑¬ÀŒ;}{\f-935 \fnil ª™Œƒ∫⁄ÃÂ;}{\f-17319 \fnil ª™Œƒø¨ÃÂ;}{\f-30567 \fnil ª™ŒƒÀŒÃÂ;}{\f-27847 \fnil ª™Œƒœ∏∫⁄;}{\f-19239 \fnil ÀŒÃÂ;}{\f-14687 \fnil ÇlÇr ÇoÉSÉVÉbÉN;}{\f-11711 \fnil ÇlÇr Çoñæí©;}{\f-31295 \fnil ÇlÇr ÉSÉVÉbÉN;}{\f-1503 \fnil ÇlÇr ñæí©;}{\f16384 \fnil Osaka;}{\f16436 \fnil OsakaÅ|ìôïù;}{\f-31551 \fnil ÉqÉâÉMÉmäpÉS Pro W3;}{\f-31647 \fnil ÉqÉâÉMÉmäpÉS Pro W6;}{\f-24831 \fnil ÉqÉâÉMÉmäpÉS Std W8;}{\f-29759 \fnil ÉqÉâÉMÉmä€ÉS Pro W4;}{\f-28671 \fnil ÉqÉâÉMÉmñæí© Pro W3;}{\f-28767 \fnil ÉqÉâÉMÉmñæí© Pro W6;}{\f17590 \fnil #PC∏Ì¡∂;}{\f17565 \fnil #±√º≠√º;}{\f17571 \fnil #« ±‚√º;}{\f17570 \fnil #«ÏµÂ∂Û¿ŒA;}{\f17410 \fnil AppleGothic;}{\f17409 \fnil AppleMyungjo;}{\f-15581 \fnil ±º∏≤;}{\f-1245 \fnil πŸ≈¡;}{\f32525 \fnil VT100;}}
{\colortbl\red255\green255\blue255;\red0\green0\blue0;\red255\green0\blue0;\red0\green255\blue0;\red0\green0\blue255;\red0\green255\blue255;\red255\green0\blue255;\red255\green255\blue0;}
{\stylesheet{\sbasedon222\snext Normal;}}
\paperw12240\paperh15840\margt720\margb720\margl720\margr720\widowctrl\ftnbj\ftnrestart\ftnstart1\pgnstart1\deftab720\sectd\linemod0\linex0\cols1\colsx0
\pard\plain{\footer \pard\plain\pard\ql\tqc\tx4640\tqr\tx9360{\plain\i\f16\fs20\cf1 Alternatives for Macintosh Eudora\tab \tab \chpgn }
}\pard\qc{\plain\f2224\fs48\cf1 Alternatives for Macintosh Eudora\par }
\pard\qc{\plain\f2224\fs48\cf1 To Rewrite, or not to Rewrite\par }
\pard\qc{\plain\f2224\fs48\cf1 \par }
\pard\ql{\plain\b\f2013\fs28\cf1 Introduction\par }
\pard\ql{\plain\f2013\fs24\cf1 The release of Eudora 7.0 for Windows poses the question of when Eudora 7.0 for Macintosh will be released.  It turns out that this is not an easy question to answer.  This paper explores some of the ideas that went into planning for the next major release}
{\plain\f2013\fs24\cf1  of Eudora for the Macintosh, and examines alternative evolutions for the application.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\b\f2013\fs28\cf1 Background\par }
\pard\ql{\plain\f2013\fs24\cf1 Before we discuss the problems facing Macintosh Eudora, we should describe some of the design elements of the application, as we will refer to them frequently.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\b\f2013\fs24\cf1 The Mailstore\par }
\pard\ql{\plain\f2013\fs24\cf1 Eudora\'d5s mailstore was designed when there was very little memory or CPU power available.  It used these resources carefully, and was therefore able to perform very well in such limited environments.  The basic design is to minimize the amount of processin}
{\plain\f2013\fs24\cf1 g done on text before it is displayed to the user.  Therefore, message text is decoded and transliterated, and attachments and other non-text content are decoded and removed to separate files.  The message text itself is stored along with the text of other}
{\plain\f2013\fs24\cf1  messages in a file called a mailbox.  The same basic mailstore is used in Windows Eudora, though enough details are different that they are not binary-compatible.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\b\f2013\fs24\cf1 Carbon\par }
\pard\ql{\plain\f2013\fs24\cf1 Eudora uses the Carbon framework for its filesystem access and user interface.  This is an older Apple technology, and has been supplanted by Cocoa}
{\plain\up6\f2013\fs12\cf1 \up6 \chftn {\footnote\pard\ql{\plain\up5\f16\fs10\cf1 \up5 \chftn }
{\plain\f16\fs20\cf1  Cocoa is really just tweaks on top of NeXTStep, which is older than Carbon, but I digress.}
}}
{\plain\f2013\fs24\cf1  .\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\b\f2013\fs24\cf1 The Editor\par }
\pard\ql{\plain\f2013\fs24\cf1 Of central importance to an email program is the text engine used to display and compose email.  Eudora has a custom text editor, that works quite well, but has limited capabilities.  It certainly has not kept up with the times regarding HTML standards, es}
{\plain\f2013\fs24\cf1 pecially in the area of table display.  Unfortunately, tables are used as a page layout system for nearly all but the simplest HTML nowadays, so this lack is rather keenly felt by users.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\b\f2013\fs28\cf1 The Problems\par }
\pard\ql{\plain\f2013\fs24\cf1 In the past, it\'d5s been our policy to maintain rough feature parity between the platforms.  This has meant releasing versions on both platforms with roughly the same features at roughly the same times.  However, this was not done for Eudora 7.0.  Below we w}
{\plain\f2013\fs24\cf1 ill explore the problems facing Eudora on the Macintosh.  Along the way, we\'d5ll note which of them apply, and to what degree, to Eudora for Windows as well.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\b\f2013\fs24\cf1 Spotlight\par }
\pard\ql{\plain\f2013\fs24\cf1 Spotlight is Apple\'d5s indexing technology.  It is the rough equivalent of the X1 indexing that is being used in Windows Eudora 7.  (X1 does not have a Macintosh product.)  Unfortunately, Spotlight\'d5s indices have a minimum file-level granularity.  Because Eu}
{\plain\f2013\fs24\cf1 dora stores multiple messages in a single file, Spotlight cannot tell which message a word appears in, only that it appears in a particular mailbox.  This makes Spotlight useless for Eudora as it stands today.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 Possible solutions for this issue are twofold:\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Redo Eudora\'d5s mailstore to put each message in a single file\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Wait for Spotlight 2.0 (release date unknown) which will be able to index the current mailstore\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\b\f2013\fs24\cf1 S/MIME\par }
\pard\ql{\plain\f2013\fs24\cf1 S/MIME presents an interesting challenge to Eudora.  Eudora has long had the capability to do encryption and decryption and handle digital signatures, via a plug-in architecture (EMSAPI).  This architecture was necessary due to US government policy regardi}
{\plain\f2013\fs24\cf1 ng encryption technology}
{\plain\up6\f2013\fs12\cf1 \up6 \chftn {\footnote\pard\ql{\plain\up5\f16\fs10\cf1 \up5 \chftn }
{\plain\f16\fs20\cf1  We really want to editorialize on this point, but we will refrain.}
}}
{\plain\f2013\fs24\cf1  .  It is probably no longer necessary, and a more integrated approach is a possibility.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 The problem with the current EMSAPI implementation is that it makes dealing with encrypted mail very unpleasant.  It is certainly adequate for a functional system, but it is manual, clumsy, and suboptimal, involving attachments and extra user operations.  }
{\plain\f2013\fs24\cf1 This is the path we took for Eudora 7.0 for Windows.  It meets basic requirements, but we don\'d5t expect a high level of user satisfaction if it is used extensively.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 Possible solutions to this problem include:\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Redo Eudora\'d5s mailstore to make the encrypted/signed information an integral part of the mailstore, rather than an attachment\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Change the EMSAPI implementation to allow for more automatic operation with the current mailstore\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Tweak the current mailstore to allow non-textual content to be kept intact \par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Live with the current suboptimal situation and implement a plug-in similar to that for Windows Eudora 7.0\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\b\f2013\fs24\cf1 HTML Handling\par }
\pard\ql{\plain\f2013\fs24\cf1 One of the biggest user complaints is the lack of sophisticated HTML handling in Eudora.  Because we use our own engine and because that engine is severely limited, especially in the area of tables, Eudora\'d5s HTML display can be primitive.  This is generall}
{\plain\f2013\fs24\cf1 y not a problem for most interpersonal email, but it is a problem for much institutional and commercial email, which typically assumes full-blown, up-to-date HTML capabilities.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 One obvious solution to this problem would be to use Apple\'d5s HTML viewer/editor, WebKit.  However, the problem with WebKit is that it is fundamentally a Cocoa technology.  While Apple officially claims it can be used by a Carbon application, they privately}
{\plain\f2013\fs24\cf1  admit that it works at best imperfectly in such an environment.  While we have been assured by some at Apple that this will be improved, it is difficult to see that as likely, as there is great pressure from Apple for developers to use Cocoa rather than C}
{\plain\f2013\fs24\cf1 arbon.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 Windows Eudora faces this problem also, but only for email composition; for viewing, it uses Microsoft\'d5s HTML engine.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 So, what can we do?\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Redo Eudora in Cocoa rather than Carbon, so that WebKit can be used in its current form\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Upgrade Eudora\'d5s editor to handle tables, and solve the biggest user complaint--but leave a host of smaller ones.\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Wait for Apple to release fixes to its Carbon implementation of WebKit\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Investigate alternate HTML technology, such as Gecko.\par }
\pard\ql{\plain\b\f2013\fs28\cf1 \par }
\pard\ql{\plain\b\f2013\fs24\cf1 Unicode & Non-Roman Languages\par }
\pard\ql{\plain\f2013\fs24\cf1 Another common complaint from our international users, and anyone who deals globally, is our lack of support for non-Roman languages.  While Macintosh Eudora can display and edit anything it receives, much of its internal structure assumes one byte per cha}
{\plain\f2013\fs24\cf1 racter, which presents difficulties for such operations as spell-checking and URL recognition.  Also, the current mailstore makes no provision for Unicode storage of outgoing mail, so even though mail can be edited, it cannot be saved and sent properly.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 Possible solutions to this problem include:\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 \par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Redo Eudora using as much of the Cocoa framework as possible, since that is all unicode-friendly.  Redo the mailstore to be able to store unicode for outoing mail.\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Tweak outgoing mail storage to support unicode.  Fix problems with the internals as they arise.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 Windows Eudora shares this problem to a great degree.\par }
\pard\ql{\plain\b\f2013\fs28\cf1 \par }
\pard\ql{\plain\b\f2013\fs24\cf1 Intel Macintoshes\par }
\pard\ql{\plain\f2013\fs24\cf1 Apple\'d5s transition to Intel hardware raises further difficulties for Eudora.  Eudora is currently built with Codewarrior from MetroWerks, a Motorola company.  CodeWarrior is not going to support the new machines.  While the current version of Eudora will r}
{\plain\f2013\fs24\cf1 un under the PowerPC emulator (called Rosetta) on the Intel Macintoshes, it will suffer a performance penalty.  Just as an added bonus, part of the Eudora development process involves an application which runs under the old Classic emulator, which is not s}
{\plain\f2013\fs24\cf1 upported at all on Intel Macintoshes.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 The two potential solutions to this problem are:\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Rewrite Eudora with Cocoa using XCode, Apple\'d5s development environment\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Move the current codebase to XCode.  This will require quite a bit of rework, as there are many minor differences, not least of which is the plug-in architecture, which will have to change, and third-party libraries that are not available for XCode and wil}
{\plain\f2013\fs24\cf1 l have to be replaced\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\b\f2013\fs24\cf1 Carbon Limitations\par }
\pard\ql{\plain\f2013\fs24\cf1 The Carbon framework Eudora uses is, as has been noted, an older Apple technology.  While Apple claimes it has parity with Cocoa, in truth there are many capabilities under Cocoa that are either not available at all to Carbon applications, available only a}
{\plain\f2013\fs24\cf1 fter delays for Carbon applications, or only imperfectly available to Carbon applications.  We fear this situation will only worsen over time.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 Possible solutions include:\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Rewrite Eudora with Cocoa\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Work around as many Carbon limitations as we can, eschew new technologies that are not supported under Carbon, and hope that Carbon support isn\'d5t dropped altogether.\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\b\f2013\fs24\cf1 Resource Limitations\par }
\pard\ql{\plain\f2013\fs24\cf1 The Macintosh market is of course limited compared to the Windows market.  However, the complexity of Macintosh software is not so much less than the complexity of Windows software, and it is increasingly difficult to maintain feature parity without spendi}
{\plain\f2013\fs24\cf1 ng a disproportionate amount of money doing Macintosh development.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 Windows Eudora and Macintosh Eudora are now two entirely different codebases with nearly no commonality.  There is therefore little opportunity for work done on one platform to be used on the other; different data structures, languages, etc are used in eac}
{\plain\f2013\fs24\cf1 h.  Parallel teams are required for development.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 A further complication here is that the data formats from both products are not binary-compatible, so there is no direct way to move data from one platform to another.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 Possible solutions to this problem are:\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Rewrite Eudora using cross-platform code as much as possible, so that work done for Windows can benefit Macintosh, and vice-versa\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Compromise on the featureset for Macintosh Eudora\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Continue to spend excessively on Macintosh development so as to maintain a two-platform offering, even if Macintosh revenue does not cover costs\par }
\pard\ql{\plain\b\f2013\fs28\cf1 \par }
\pard\ql{\plain\b\f2013\fs28\cf1 The Way Forward\par }
\pard\ql{\plain\f2013\fs24\cf1 So, having laid out all of the above, how should we proceed?  It seems clear that a rewrite of Eudora for the Macintosh would solve all of the problems above.  However, it\'d5s a big task, one we have always been reluctant to take on, necessitating as it woul}
{\plain\f2013\fs24\cf1 d a long hiatus between releases.  Our current feeling is that it would take approximately 2 man-years to have an acceptably functional rewritten Eudora of Macintosh.  Is there any other way forward?\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 Let\'d5s recap the issues here, and then see what life looks like if we take some of the non-rewrite paths.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Spotlight\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 S/MIME\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 HTML Handling\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Unicode & Non-Roman Languages\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Intel Macintoshes\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Carbon Limitations\par }
\pard\ql\li720{\plain\f2013\fs24\cf1 Resource Limitations\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 Regarding Spotlight, I\'d5m confident that if we wait long enough, Apple will overcome the single-file limitation.  It is in fact possible that by the time we would be able to finish the rewrite, the limitation would have been lifted in any case.  The S/MIME }
{\plain\f2013\fs24\cf1 issue can be worked around in the short term by living with the clumsy EMSAPI, and in the longer term by smaller changes to the application\'d5s calling of the EMSAPI or by internal S/MIME support, without radical changes to the mailstore.  Unicode support ce}
{\plain\f2013\fs24\cf1 rtainly could be added to the current code without a rewrite, though much of the effort would involve things we would get \'d2for free\'d3 from a Cocoa rewrite.  There is simply no alternative to moving to XCode to address the Intel Macintoshes.  That\'d5s a substa}
{\plain\f2013\fs24\cf1 ntial, but by no means impossible, task.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 So much for the simple solutions.  That leaves us with three things to solve: the limitations of Carbon, the limited resources for development, and HTML.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 The only real long-term solution to the HTML problem is a new text engine, whether it be WebKit or Gecko or who knows what.  Fitting any of it into the current Carbon application would not be an easy task.  Fixing the table support in Eudora\'d5s current edit}
{\plain\f2013\fs24\cf1 or would probably ease some people\'d5s concerns for a while, to buy time for such integration.  Or HTML support could be left incomplete, and the damage that would do to the market penetration of Eudora on the Macintosh accepted.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 The issue of limited resources for Macintosh-only development will remain a significant one as long as the two codebases are separate.  If there is organizational will and sufficient Windows revenue, one might choose simply to live with it.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 Finally, I think it clear that Carbon will not be immediately eliminated.  It was ported to the Intel Macintoshes, which is a good sign.  Most importantly, it is used by both Adobe and Microsoft, so there are developers important to Apple who also rely on }
{\plain\f2013\fs24\cf1 it.  It will likely continue to work for at least two years, perhaps more.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\f2013\fs24\cf1 How long would it take to bring Macintosh Eudora up to Windows Eudora 7 features?  The biggest uncertainty here is Spotlight.  Until the multiple-container Spotlight is released, it\'d5s not possible to do indexed search.  Laying that aside, I expect it would}
{\plain\f2013\fs24\cf1  take 4-6 man-months of labor to bring Macintosh Eudora to feature parity with Windows Eudora.\par }
\pard\ql{\plain\f2013\fs24\cf1 \par }
\pard\ql{\plain\b\f2013\fs28\cf1 In Conclusion\par }
\pard\ql{\plain\f2013\fs24\cf1 It remains my recommendation that the Cocoa rewrite is the best plan for Macintosh Eudora.  It would set up a strong base for the future for both platforms, as the rewritten code will migrate to Windows as well.  It would provide for binary compatibility b}
{\plain\f2013\fs24\cf1 etween the products.  However, if there is no stomach for the required investment, it would be possible to continue with Eudora on the Macintosh with a less radical philosophy.}
}